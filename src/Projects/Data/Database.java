package Projects.Data;

import Projects.Intergration.RegNoNotFoundException;
import Projects.Model.*;

import java.util.Random;

/**
 * Has the data and information needed for each vehicle
 */
public class Database {

    private Random r = new Random();
    String[] possibleParts = {"Exhaust Pipe", "Drivers Chair", "Headlights", "Left front tire", "Ejector seat", "Illegal nitrous system", "Steering wheel"};
    private String[] regNosInDatabase = {"ABC123", "LOL666", "SWAGGG", "HOTGRL"};

    public Database() {

    }

    /**
     * Takes a registration number for a vehicle and returns the inspections for that vehicle, currently randomized to replace a database.
     *
     * @param regNo The submitted registration number during the search.
     * @return Returns a randomly generated <code>InspectionChecklist</code>.
     */
    public InspectionChecklist fetchInspectionsByRegNo(String regNo)throws RegNoNotFoundException {
        if (memberOfArray(regNosInDatabase,regNo))
            return createRandomInspection(regNo);
        else{
            throw new RegNoNotFoundException("Registration number not found!");

        }
    }


    /**
     * Returns a <code>InspectionChecklist</code> with a random (between 1 and 7) number of <code>InspectionDTO</code>'s.
     *
     * @return The randomly generated <code>InspectionChecklist</code>.
     */
    private InspectionChecklist createRandomInspection(String regNo) {
        int numberOfInspections = 1 + r.nextInt(7);

        InspectionDTO[] inspections = new InspectionDTO[numberOfInspections];

        for (int i = 0; i <= numberOfInspections - 1; i++) {
            inspections[i] = randomInspectionDTO(regNo);
        }
        return new InspectionChecklist(inspections);

    }

    /**
     * Calculates a cost, depending on what the registration number is it uses 3 different strategies: Random, Expensive or Cheap.
     *
     * @return The cost generated by the strategy.
     */
    private double calculateCost(CostCalculationStrategy strat) {
        return strat.calculateCost();
    }

    /**
     * Randomly generates a potential part to be inspected.
     *
     * @return A random member of the <code>possibleParts</code> array.
     */
    private String randomPartToInspect() {
        return possibleParts[r.nextInt(5)];

    }

    /**
     * Randomly generates an <code>InspectionDTO</code>. Random except for <code>cost</code> which depends on the <code>regNo</code>
     *
     * @return A randomly generated <code>InspectionDTO</code>.
     */
    InspectionDTO randomInspectionDTO(String regNo) {

        return new InspectionDTO(randomPartToInspect(), calculateCost(determineStrategy(regNo)), false, regNo);
    }

    /**
     * Saves the <code>InspectionChecklist</code> in the <code>Database</code>.
     *
     * @param completedInspection The <code>InspectionChecklist</code> after it has been altered during the inspection.
     */
    public void storeInspection(InspectionChecklist completedInspection) {
        System.out.println("Inspection stored in database!");
    }

    boolean memberOfArray(final String[] array, final String possibleMember) {
        for (String arrayPart : array) {
            if (arrayPart.equals(possibleMember))
                return true;
        }
        return false;
    }

    private CostCalculationStrategy determineStrategy(String regNo){
        CostCalculationStrategy strat = new RandomCostStrategy();
        if (regNo.equals("ABC123") || regNo.equals("LOL666"))
            return strat;
        if (regNo.equals("HOTGRL"))
            strat = new AttractiveFemaleCustomerStrategy();
        if (regNo.equals("SWAGGG"))
            strat = new ScamCustomerStrategy();
        return strat;
    }
}
